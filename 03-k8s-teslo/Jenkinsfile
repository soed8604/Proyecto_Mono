def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger'
]

pipeline {
    agent any
    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_DEFAULT_REGION = "us-east-1"
    }

    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/soed8604/Proyecto_Mono.git']])
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                script {
                    // Verificar y actualizar kubectl si es necesario
                    sh '''
                    KUBECTL_VERSION=$(kubectl version --client --short | grep -oP '(?<=v)[0-9]+\\.[0-9]+\\.[0-9]+')
                    REQUIRED_KUBECTL_VERSION="1.30.0"
                    if [ "$(printf '%s\n' "$REQUIRED_KUBECTL_VERSION" "$KUBECTL_VERSION" | sort -V | head -n1)" != "$REQUIRED_KUBECTL_VERSION" ]; then
                        echo "Installing/Updating kubectl..."
                        curl -LO "https://dl.k8s.io/release/v$REQUIRED_KUBECTL_VERSION/bin/linux/amd64/kubectl"
                        chmod +x ./kubectl
                        sudo mv ./kubectl /usr/local/bin/kubectl
                    fi
                    '''

                    // Verificar y actualizar aws-iam-authenticator si es necesario
                    sh '''
                    AUTH_VERSION=$(aws-iam-authenticator version 2>&1 | grep -oP '(?<=Version: )[0-9]+\\.[0-9]+\\.[0-9]+')
                    REQUIRED_AUTH_VERSION="1.18.9"
                    if [ "$(printf '%s\n' "$REQUIRED_AUTH_VERSION" "$AUTH_VERSION" | sort -V | head -n1)" != "$REQUIRED_AUTH_VERSION" ]; then
                        echo "Installing/Updating aws-iam-authenticator..."
                        curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/aws-iam-authenticator
                        chmod +x ./aws-iam-authenticator
                        sudo mv aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
                    fi
                    '''

                    // Verificar y actualizar AWS CLI si es necesario
                    sh '''
                    AWS_CLI_VERSION=$(aws --version 2>&1 | grep -oP '(?<=aws-cli/)[0-9]+\\.[0-9]+\\.[0-9]+')
                    REQUIRED_AWS_CLI_VERSION="2.0.0"
                    if [ "$(printf '%s\n' "$REQUIRED_AWS_CLI_VERSION" "$AWS_CLI_VERSION" | sort -V | head -n1)" != "$REQUIRED_AWS_CLI_VERSION" ]; then
                        echo "Installing/Updating AWS CLI..."
                        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                        unzip awscliv2.zip
                        sudo ./aws/install
                    fi
                    '''
                }
            }
        }
        stage('Update kubeconfig') {
            steps {
                script {
                    // Actualiza el kubeconfig con AWS EKS
                    sh 'aws eks update-kubeconfig --name mono-eks-cluster'
                    
                    // Reemplaza la apiVersion en el kubeconfig
                    sh "sed -i 's/client.authentication.k8s.io\\/v1alpha1/client.authentication.k8s.io\\/v1beta1/g' /var/lib/jenkins/.kube/config"
                }
            }
        }
        
        stage('Deployar mi API Application') {
            steps {
                script {
                    dir('03-k8s-teslo') {
                        // Configurar kubectl para el clúster de EKS
                        sh 'aws eks update-kubeconfig --name mono-eks-cluster'
                        // Aplicar manifiestos de Kubernetes
                        sh 'kubectl apply -f postgres-config.yaml'
                        sh 'kubectl apply -f postgres-secret.yaml'
                        sh 'kubectl apply -f postgres.yaml'
                        sh 'kubectl apply -f pg-admin-secrets.yaml'
                        sh 'kubectl apply -f pg-admin.yaml'
                        sh 'kubectl apply -f backend-secrets.yaml'
                        sh 'kubectl apply -f backend-app.yaml'

                        // Verificar el estado de los despliegues
                        sh 'kubectl rollout status deployment/backend-app'
                        sh 'kubectl rollout status deployment/pg-admin'
                    }
                }
            }
        }
    }

    post {
        success {
            slackSend (
                channel: '#mono-notifications',
                color: COLOR_MAP['SUCCESS'],
                message: """✅ Deploy de mi aplicación exitoso.
                Job: ${env.JOB_NAME}
                Build: ${env.BUILD_NUMBER}
                Para más información, visita: ${env.BUILD_URL}"""
            )
        }
        failure {
            slackSend (
                channel: '#mono-notifications',
                color: COLOR_MAP['FAILURE'],
                message: """❌ El despliegue de mi aplicación falló.
                Job: ${env.JOB_NAME}
                Build: ${env.BUILD_NUMBER}
                Para más información, visita: ${env.BUILD_URL}"""
            )
        }
    }
}
